<?php

/**
 * @file
 * Contains opeka.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Crypt;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements template_preprocess_html().
 *
 * Adds user permission classes and widget classes to body
 */
function opeka_preprocess_html(&$vars) {
  $user = \Drupal::currentUser();
  $path = \Drupal::service('path.current')->getPath();
  $widget_type_classes = opeka_get_widget_classes($path);

  $classes = 'opeka-no-access';
  if ($user->hasPermission('administer opeka chat')) {
    $classes = 'opeka-counselor';
  }
  else if ($user->hasPermission('access opeka chat')) {
    $classes = 'opeka-regular';
  }

  if (isset($widget_type_classes)) {
    $classes .= ' widget-' . $widget_type_classes;
  }
  // Remove toolbar on widget pages
  if (isset($vars['page_top']['toolbar'])) {
    $vars['page_top']['toolbar'] = null;
  }
  if (is_array($vars['attributes'])) {
    $vars['attributes'] = new Attribute();
  }
  $vars['attributes']->addClass($classes);
}

/**
 * Add popup widget to all pages except chat pages and admin pages
 */
function opeka_preprocess_page(&$variables) {
  $popup_activated = \Drupal::config('opeka.general_settings')->get('widget_popup_feature');
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($popup_activated && !opeka_is_chat_page() && !($is_admin)) {
    $variables['#attached']['library'][] =  'opeka/popup';
  }
}

/**
 * Helper function that return the appropriate css classes
 * for the widget pages based on the path
 *
 * @return string - css classes to add to the body element
 */
function opeka_get_widget_classes($path) {
  $widget_type_classes = "";
  $allowed_widgets = ['header', 'popup'];
  $allowed_room_types = ['pair', 'group'];
  if(substr($path, 0, 14) === '/opeka-widgets') {
    $widget_type = explode('/', $path);
    if (isset($widget_type[2]) && in_array($widget_type[2],$allowed_widgets)) {
      $widget_type_classes = $widget_type[2];
    }
    if (isset($widget_type[3]) && in_array($widget_type[3],$allowed_room_types)) {
      $widget_type_classes .= ' ' . $widget_type[3];
    }
  }
  return $widget_type_classes;
}

/**
 * Helper function that loads the current users profile image URI into the
 * drupalSettings javascript object.
 *
 * @return string - relative path of user picture.
 */
function opeka_profile_pic_path() {
  $picturePath = FALSE;
  if ($user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id())) {
    // Get currently logged in user's picture
    if (!$user->user_picture->isEmpty()) {
      $pictureURI = $user->user_picture->entity->getFileUri();

      /* @todo: maybe implement showing img with imagestyle?
      remember parse_url helper
      $url = ImageStyle::load('chatavatar30x30')->buildUrl($pictureURI);
      dpm($url);
      */

      $pictureURL = file_create_url($user->user_picture->entity->getFileUri());
      $picturePath = file_url_transform_relative($pictureURL);
    }
    else {
      // Get default user picture if no picture is set on user profile
      $field = \Drupal\field\Entity\FieldConfig::loadByName('user', 'user', 'user_picture');
      $default_image = $field->getSetting('default_image');
      $file = $default_image['uuid'] ? \Drupal::entityManager()->loadEntityByUuid('file', $default_image['uuid']) : NULL;
      if ($file !== NULL) {
        $file->getFileUri();
        $pictureURL= file_create_url($file->getFileUri());
        $picturePath = file_url_transform_relative($pictureURL);
      }
      else {
        // @todo: check if userPictures feature is on, if so, show user warning
        /* drupal_set_message(t('The default profile picture is not set. No images will be shown
        in the chat if the user profile feature is enabled.'), 'warning', TRUE); */
      }
    }
  }
  return $picturePath;
}


/**
 * Implements hook_help().
 */
function opeka_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the opeka module.
    case 'help.page.opeka':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Secure anonymous chat system, built with Drupal and dnode.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function opeka_theme() {
  return [
    'opeka_chat' => [
      'variables' => [
      ],
    ],
    'opeka_admin_chat' => [
      'variables' => [
      ],
    ],
    'opeka_header_widget' => [
      'variables' => [
      ],
    ],
    'opeka_popup_widget' => [
      'variables' => [
      ],
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 */
function opeka_library_info_build() {
  $js_url = \Drupal::config('opeka.advanced_settings')->get('connectjs_url');
  $libraries = [
    'dnode.connect' => [
      'js' => [
        $js_url => ['type' => 'external'],
      ],
    ],
  ];
  return $libraries;
}

/**
 * Implements hook_preprocess_THEME().
 */
function opeka_preprocess_opeka_chat(&$variables) {
  opeka_merge_vars($variables);
  $variables['#attached']['library'][] = 'opeka/chat';
  $variables['#attached']['drupalSettings']['opeka']['user']['admin'] = FALSE;
  $variables['#attached']['library'][] = 'opeka/dnode.connect';
}

/**
 * Implements hook_preprocess_THEME().
 */
function opeka_preprocess_opeka_admin_chat(&$variables) {
  opeka_merge_vars($variables);
  $variables['#attached']['library'][] = 'opeka/admin.chat';
  $variables['#attached']['drupalSettings']['opeka']['user']['admin'] = TRUE;
  $variables['#attached']['library'][] = 'opeka/dnode.connect';
}

/**
 * Implements hook_preprocess_THEME().
 */
function opeka_preprocess_opeka_header_widget(&$variables) {
  opeka_merge_vars($variables);
  $variables['#attached']['library'][] = 'opeka/header.widget';
  $variables['opening_hours_simple'] = \Drupal::config('opeka.general_settings')->get('opening_hours_simple');
  $variables['connect'] = t('Connecting...');
  $variables['subtext'] = \Drupal::config('opeka.advanced_settings')->get('widget_header_button_subtext');
}

/**
 * Implements hook_preprocess_THEME().
 */
function opeka_preprocess_opeka_popup_widget(&$variables) {
  opeka_merge_vars($variables);
  $variables['#attached']['library'][] = 'opeka/popup.widget';
  $variables['connect'] = t('Connecting...');
  $variables['pair_chat_name'] = \Drupal::config('opeka.advanced_settings')->get('pair_chat_name');
  $variables['widget_popup_text'] = \Drupal::config('opeka.general_settings')->get('widget_popup_text');
  $variables['widget_popup_link_text'] = \Drupal::config('opeka.general_settings')->get('widget_popup_link_text');
  $variables['widget_popup_link_url'] = \Drupal::config('opeka.general_settings')->get('widget_popup_link_url');
}


/**
 * Merge vars from other modules if present
 */

function opeka_merge_vars(&$variables) {
  $opeka_settings = _opeka_compile_javascript_settings();
  // Merge in variables from custom modules if present
  if (isset($variables['#attached']['drupalSettings']['opeka'])) {
    $variables['#attached']['drupalSettings']['opeka'] = array_replace_recursive($opeka_settings, 
    $variables['#attached']['drupalSettings']['opeka']);
  }
  else {
    $variables['#attached']['drupalSettings']['opeka'] = $opeka_settings;
  }
}

/**
 * Helper function for getting all relevant JS settings.
 * 
 * @return array of Opeka related JS settings.
 */
function _opeka_compile_javascript_settings() {
  $opeka_general_settings_config = \Drupal::config('opeka.general_settings');
  $opeka_advanced_settings_config = \Drupal::config('opeka.advanced_settings');
  $js_url = $opeka_advanced_settings_config->get('connectjs_url');

  $settings = $opeka_general_settings_config->get() + $opeka_advanced_settings_config->get() + [
    'path' => base_path() . drupal_get_path('module', 'opeka'),
    'dnode_endpoint' => preg_replace('/\/connect[.]js$/', '/opeka', $js_url),
    'socket_io_url' => preg_replace('/\/connect[.]js$/', '/', $js_url),
    'user' => [
      'name' => \Drupal::currentUser()->getUsername(),
      'uid' => \Drupal::currentUser()->id(),
      'picture_path' => opeka_profile_pic_path(),
      'sid' => Crypt::hashBase64(\Drupal::service('session_manager')->getId()),
    ],
  ];

  return $settings;

}

/**
 * Checks whether the current page is rendered using the Opeka chat system.
 *
 * @return boolean - TRUE if current page is an Opeka page and FALSE otherwise.
 */
function opeka_is_chat_page() {
  $path = \Drupal::service('path.current')->getPath();
  $prefixes = array(
    "/opeka",
    "/opeka-widgets",
    "/admin/opeka"
  );
  foreach($prefixes as $prefix) {
    if(substr($path, 0, strlen($prefix)) === $prefix) {
      return TRUE;
    }
  }
  return FALSE;
}
